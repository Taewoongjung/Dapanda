name: Java CI-CD with Gradle

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  build_dockerpush:
    runs-on: ubuntu-latest
    env:
      APPLICATION: ${{ secrets.APPLICATION }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: v0.7.0
      
    - name: make application.properties
      if: true
      run: |
        touch ./src/main/resources/application.properties
        echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
      
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build

    - name: Login to NCP Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
        username: ${{ secrets.NCP_ACCESS_KEY }}
        password: ${{ secrets.NCP_SECRET_KEY }} 

    - name: build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.NCP_CONTAINER_REGISTRY }}/tag-name:latest
        cache-from: type=registry,ref=${{ secrets.NCP_CONTAINER_REGISTRY }}/tag-name:latest
        cache-to: type=inline


  pull_deploy:
    name: Connect server ssh and pull from container registry
    needs: build_dockerpush
    runs-on: ubuntu-latest
    steps:
      - name: connect ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOYMENT_HOST }}
          username: ${{ secrets.DEPLOYMENT_USERNAME }}
          password: ${{ secrets.DEPLOYMENT_PASSWORD }}
          port: ${{ secrets.DEPLOYMENT_PORT }}
          script: |
            docker pull ${{ secrets.NCP_CONTAINER_REGISTRY }}/tag-name
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
            docker run -d -p 8080:80 ${{ secrets.NCP_CONTAINER_REGISTRY }}/tag-name
            docker image prune -f
